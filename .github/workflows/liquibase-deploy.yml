name: Liquibase Deploy

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      # --- Fix: create ~/.ssh and write config + EC2 key ---
      - name: Prepare SSH on runner
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          printf "Host *\n    StrictHostKeyChecking no\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem

      # --- Deploy from EC2 to RDS using your repo and secrets ---
      - name: Deploy via EC2
        env:
          REPO_CLONE_URL: ${{ secrets.REPO_CLONE_URL }}
          RDS_JDBC_URL:   ${{ secrets.RDS_JDBC_URL }}
          DB_USER:        ${{ secrets.DB_USER }}
          DB_PASS:        ${{ secrets.DB_PASS }}
        run: |
          set -euo pipefail
          ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no "${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}" <<EOF
            set -euo pipefail

            # Install prerequisites if missing (Amazon Linux)
            if ! command -v java >/dev/null; then sudo dnf install -y java-17-amazon-corretto; fi
            if ! command -v mvn  >/dev/null; then sudo dnf install -y maven; fi
            if ! command -v git  >/dev/null; then sudo dnf install -y git; fi

            # Checkout or refresh the repo
            if [ -d ~/Sample_liquibase ]; then
              cd ~/Sample_liquibase
              git fetch --all
              git reset --hard origin/main
            else
              git clone "${REPO_CLONE_URL}" ~/Sample_liquibase
              cd ~/Sample_liquibase
            fi

            # Run Liquibase against RDS
            mvn -q \
              -Dliquibase.url="${RDS_JDBC_URL}" \
              -Dliquibase.username="${DB_USER}" \
              -Dliquibase.password="${DB_PASS}" \
              -Dliquibase.changeLogFile=src/main/resources/db/changelog/db.changelog-master.yaml \
              liquibase:update
          EOF
